{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","class","content","href","onClick","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","React","Component","App","filter","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNA2BeA,EAzBD,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAEbC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OAEI,yBAAKC,UAAU,kBAAkBC,IAAMF,EAAKG,IAC5C,wBAAIC,MAAM,mBAAV,IAA8BJ,EAAKK,QAAnC,IAA4C,uBAAGC,KAAK,KAAKF,MAAM,sBAAnB,IAAyC,uBAAGG,QAAU,WAAKX,EAAWI,EAAKG,KAAMF,UAAU,uCAAlD,UAArF,SAQR,uBAAGA,UAAU,oBAAb,gDAGJ,OACI,yBAAKA,UAAU,oBACVJ,ICWEW,E,2MA9BZC,MAAQ,CACJJ,QAAQ,I,EAGZK,aAAe,SAACC,GACX,EAAKC,SAAS,CACVP,QAASM,EAAEE,OAAOC,S,EAI3BC,aAAe,SAACJ,GACZA,EAAEK,iBACD,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVP,QAAQ,M,wEAIZ,OACI,6BACI,0BAAMc,SAAUC,KAAKL,cACjB,iDAEA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,aAAcI,MAASM,KAAKX,MAAMJ,gB,GAxBlEkB,IAAMC,WCsCbC,E,2MAnCbhB,MAAO,CACLd,MAAO,CACL,CAACQ,GAAG,EAAGE,QAAQ,iBACf,CAACF,GAAG,EAAGE,QAAS,6B,EAIpBT,WAAa,SAACO,GACZ,IAAMR,EAAQ,EAAKc,MAAMd,MAAM+B,QAAO,SAAA1B,GAClC,OAAOA,EAAKG,KAAOA,KAEvB,EAAKS,SAAS,CACZjB,W,EAIFuB,QAAU,SAAClB,GACTA,EAAKG,GAAKwB,KAAKC,SACf,IAAIjC,EAAK,sBAAM,EAAKc,MAAMd,OAAjB,CAAwBK,IACjC,EAAKY,SAAS,CACZjB,W,wEAIJ,OACE,yBAAKM,UAAU,OACb,yBAAKA,UAAU,aACX,wBAAIA,UAAU,oBAAd,WACA,kBAAC,EAAD,CAAON,MAAQyB,KAAKX,MAAMd,MAAOC,WAAawB,KAAKxB,aACnD,kBAAC,EAAD,CAASsB,QAASE,KAAKF,gB,GA/BjBK,IAAMC,WCSJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1b67bbc4.chunk.js","sourcesContent":["import React from  'react';\r\n\r\nconst Todos = ({todos, deleteTodo}) => {\r\n\r\n    const todoList = todos.length ? (\r\n        todos.map(todo => {\r\n            return(\r\n                \r\n                <div className=\"collection-item\" key ={todo.id}>\r\n                <li class=\"collection-item\"> {todo.content} <a href=\"#!\" class=\"secondary-content \"> <i onClick ={()=>{deleteTodo(todo.id)}} className=\"material-icons small rigth red-text\" >close</i></a> </li>  \r\n                \r\n                </div>\r\n                        \r\n                 \r\n            )\r\n        })\r\n    ):(\r\n        <p className='center blue-text' >You have nothing left to do! congratulations</p>\r\n    )\r\n\r\n    return(\r\n        <div className=\"todos collection\">\r\n            {todoList}\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default Todos;","import React from 'react';\r\n\r\nclass AddTodo extends React.Component {\r\n   state = {\r\n       content:''\r\n   } \r\n   //function to handle Onchange of the input field\r\n   handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value \r\n        })\r\n   }\r\n   //function to handle the submit\r\n   handleSubmit = (e) => {\r\n       e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            content:''\r\n        })\r\n   }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label > Add new To do</label>\r\n                    \r\n                    <input type=\"text\" onChange={this.handleChange} value = {this.state.content}  />    \r\n                </form>    \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default AddTodo;","import React from 'react';\nimport Todos from './Todos';\nimport AddTodo from './AddTodo';\nclass App extends React.Component {\n  //dummy data for the state\n  state ={\n    todos: [\n      {id:1, content:'buy some milk'},\n      {id:2, content: 'take the dog for a walk'}\n    ]\n  }\n  //function to delete todos\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter(todo =>{\n        return todo.id !== id\n    });\n    this.setState({\n      todos\n    })\n  }\n    //function to add new todos\n    addTodo = (todo) => {\n      todo.id = Math.random();\n      let todos =[...this.state.todos, todo];\n      this.setState({\n        todos\n      })\n    }\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n            <h1 className=\"center blue-text\">Todo's </h1>\n            <Todos todos ={this.state.todos} deleteTodo ={this.deleteTodo} />\n            <AddTodo addTodo={this.addTodo} />\n        </div>\n      </div>\n   );\n }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}